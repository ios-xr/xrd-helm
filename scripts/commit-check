#!/usr/bin/env bash

# This script runs all commit checks EXCEPT for checking that the version is
# correctly incermented, which is done via a seperate github action.

set -e

function cleanup()
{
    echo
    echo "Cleaning up..."
    if [[ -d $TMP_VENV ]]; then
        rm -r "$TMP_VENV"
    fi
}

trap cleanup EXIT

#=====================================================
# Run checks
#=====================================================

FAILURES=0

echo "Setting up python venv..."
TMP_VENV=$(mktemp -d -t venv.XXXXXX)
python3 -m venv "$TMP_VENV"
"$TMP_VENV"/bin/pip install --upgrade pip
"$TMP_VENV"/bin/pip install PyYAML

echo
echo "Running version-increment dependency check"
if ! "$TMP_VENV"/bin/python3 ./scripts/check-dependency-version-increment; then
    echo "Version-increment dependency check failed, check output and fix issues." >&2
    FAILURES=$((FAILURES+1))
else
    echo "Version-increment dependency check passed."
fi

echo
echo "Running helm lint..."
args=("--set" "image.repository=repository" "--set" "image.tag=latest")
error=false
for chart in charts/{xrd-vrouter,xrd-control-plane}; do
    pushd "$chart"
    if ! (helm dependency update && helm lint "${args[@]}"); then
        error=true
    fi
    popd
done
if [ $error = true ]; then
    FAILURES=$((FAILURES+1))
    echo "Helm lint failed, check output and fix errors" >&2
else
    echo "Helm lint passed."
fi

echo
echo "Running shellcheck..."
if ! shellcheck scripts/{chart-releaser,commit-check}; then
    echo "Shellcheck failed, check output and fix issues." >&2
    FAILURES=$((FAILURES+1))
else
    echo "Shellcheck passed."
fi

podman build tests/ -t helm-tests --network host

echo
echo "Running host-check unit tests..."
if ! podman run --rm -v "$PWD/:/charts" helm-tests bats tests/ut/host-check; then
    echo "host-check unit tests failed, check output and fix issues." >&2
    FAILURES=$((FAILURES+1))
else
    echo "host-check unit tests passed."
fi

echo
echo "Running Control Plane unit tests..."
if ! podman run --rm -v "$PWD/:/charts" helm-tests bats tests/ut/xrd-control-plane; then
    echo "Control Plane unit tests failed, check output and fix issues." >&2
    FAILURES=$((FAILURES+1))
else
    echo "Control Plane unit tests passed."
fi

echo
echo "Running vRouter unit tests..."
if ! podman run --rm -v "$PWD/:/charts" helm-tests bats tests/ut/xrd-vrouter; then
    echo "vRouter unit tests failed, check output and fix issues." >&2
    FAILURES=$((FAILURES+1))
else
    echo "vRouter unit tests passed."
fi

#=====================================================
# Final steps
#=====================================================

echo
if ((FAILURES > 0)); then
    echo "ERROR: There were $FAILURES failures"
    exit 1
else
    echo "SUCCESS: All passed!"
    exit 0
fi